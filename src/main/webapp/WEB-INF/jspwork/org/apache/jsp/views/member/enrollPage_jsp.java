/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.78
 * Generated at: 2023-08-29 01:47:16 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class enrollPage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/views/member/../common/footer.jsp", Long.valueOf(1693217028000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Petmily</title>\r\n");
      out.write("<script type=\"text/javascript\" src=\"/testq/resources/js/jquery-3.7.0.min.js\"></script>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("body h1 {\r\n");
      out.write("      font-family: 'Surround', sans-serif;\r\n");
      out.write("    }\r\n");
      out.write("    form {\r\n");
      out.write("      text-align: center; /* form 요소 내부의 내용을 가운데 정렬 */\r\n");
      out.write("      margin: 0 auto; /* 가운데 정렬을 위한 외부 여백 조정 */\r\n");
      out.write("      width: 350px; /* 폼의 너비 설정 */\r\n");
      out.write("      height: auto;\r\n");
      out.write("      border: 1px solid black;\r\n");
      out.write("    }\r\n");
      out.write(" td input:not(#checkpassword) {\r\n");
      out.write(" width: 250px;\r\n");
      out.write(" height: 30px;\r\n");
      out.write(" border-radius: 3px;\r\n");
      out.write(" background-color: #c5c5c5;\r\n");
      out.write("/* display: flex;\r\n");
      out.write("justify-content: space-between; */\r\n");
      out.write(" }\r\n");
      out.write(" td input#dupcheck {\r\n");
      out.write(" width: 80px;\r\n");
      out.write(" height: 34px;\r\n");
      out.write(" border-radius: 3px;\r\n");
      out.write("   background-color: #39f;\r\n");
      out.write(" }\r\n");
      out.write(" td input#dupcheck2 {\r\n");
      out.write(" width: 80px;\r\n");
      out.write(" height: 34px;\r\n");
      out.write(" border-radius: 3px;\r\n");
      out.write("   background-color: #39f;\r\n");
      out.write(" }\r\n");
      out.write(" hr {\r\n");
      out.write(" width: 100%;\r\n");
      out.write(" }\r\n");
      out.write(" input[type=submit] {\r\n");
      out.write("  width: 340px;\r\n");
      out.write(" height: 34px;\r\n");
      out.write(" border-radius: 3px;\r\n");
      out.write(" margin-right: 3px;\r\n");
      out.write(" background-color: #39f;\r\n");
      out.write(" }\r\n");
      out.write("/*      ::placeholder {\r\n");
      out.write("      color: red; /* 힌트 텍스트의 색상을 빨간색으로 설정 */\r\n");
      out.write("      font-style: italic; /* 힌트 텍스트의 글꼴을 기울임체로 설정 */ \r\n");
      out.write("    }*/\r\n");
      out.write(" input[type=password] {\r\n");
      out.write(" width: 400px;\r\n");
      out.write(" height: 30px;\r\n");
      out.write(" border-radius: 3px;\r\n");
      out.write(" background-color: #c5c5c5;\r\n");
      out.write("/* display: flex;\r\n");
      out.write("justify-content: space-between; */\r\n");
      out.write(" }\r\n");
      out.write(" #checkpassword {\r\n");
      out.write(" font-size: 7pt;\r\n");
      out.write(" color: #ff6633;\r\n");
      out.write(" width:auto;\r\n");
      out.write(" height:auto;\r\n");
      out.write(" border: none;\r\n");
      out.write(" margin: 0px;\r\n");
      out.write(" padding: 0px;\r\n");
      out.write(" white-space: pre-line;\r\n");
      out.write(" }\r\n");
      out.write("</style>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("window.onload = function(){\r\n");
      out.write("	var mid = document.getElementById('mid');\r\n");
      out.write("	var mpwd = document.getElementById('mpwd');\r\n");
      out.write("	var mpwd2 = document.getElementById('mpwd2');\r\n");
      out.write("	var notice = document.getElementById('checkpassword');\r\n");
      out.write("	var mnick = document.getElementById('mnick');\r\n");
      out.write("	var memail = document.getElementById('memail');\r\n");
      out.write("	\r\n");
      out.write("	console.log(notice);\r\n");
      out.write("	\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h1 align=\"center\">Petmily</h1> <!-- 추후 include처리 -->\r\n");
      out.write("<h2 align=\"center\">회원가입</h2> <!-- 추후 include처리 -->\r\n");
      out.write("<form action=\"/petmily/enroll\">\r\n");
      out.write("<table>\r\n");
      out.write("<tr><td><input type=\"text\" id=\"mid\" name=\"mid\" placeholder=\"사용할 아이디 입력\" required> \r\n");
      out.write("</td><td><input type=\"button\" value=\"중복확인\" id=\"dupcheck\" onclick=\"#\"></td></tr>\r\n");
      out.write("<tr><td><input type=\"password\" id=\"mpwd\" name=\"mpwd\" placeholder=\"사용할 패스워드 입력\"required></td></tr>\r\n");
      out.write("<tr><td><input type=\"password\" id=\"mpwd2\" placeholder=\"패스워드 확인\"required></td></tr>\r\n");
      out.write("<tr><td><div id=\"checkpassword\">패스워드는 영어 대소문자와 @, !, #, $중 하나의 기호를 포함하여 6~12자로 작성해주세요.</div></td></tr>\r\n");
      out.write("<tr><td><input type=\"text\" id=\"mnick\" name=\"mnick\" placeholder=\"사용할 닉네임 입력\" required><!--  &nbsp;  &nbsp;  -->\r\n");
      out.write("<tr><td><input type=\"email\" id=\"memail\" name=\"memail\" placeholder=\"Email\" required><!--  &nbsp;  &nbsp;  -->\r\n");
      out.write("</td><td><input type=\"button\" value=\"중복확인\" id=\"dupcheck2\" onclick=\"#\"></td></tr>\r\n");
      out.write("</table>\r\n");
      out.write("<input type=\"submit\" value=\"가입하기\"> &nbsp;\r\n");
      out.write("</form>\r\n");
      out.write("<br>\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
